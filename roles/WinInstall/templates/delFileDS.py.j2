#!/usr/bin/python
import sys
import time
import time
import atexit
import argparse
import getpass
import requests
import re
requests.packages.urllib3.disable_warnings()

import ssl



try:
	_create_unverified_https_context = ssl._create_unverified_context
except AttributeError:
	# Legacy Python that doesn't verify HTTPS certificates by default
	pass
else:
 # Handle target environment that doesn't support HTTPS verification
	ssl._create_default_https_context = _create_unverified_https_context
system = sys.argv[1]



from pyVmomi import vim, vmodl
from pyVim import connect
from pyVim.connect import Disconnect, SmartConnect, GetSi




def get_obj(content, vimtype, name):
    """
     Get the vsphere object associated with a given text name
    """
    obj = None
    container = content.viewManager.CreateContainerView(content.rootFolder, vimtype, True)
    for c in container.view:
        if c.name == name:
            obj = c
            break
    return obj





def wait_for_task(task, actionName='job', hideResult=False):
    """
    Waits and provides updates on a vSphere task
    """

    while task.info.state == vim.TaskInfo.State.running:
        time.sleep(2)

    if task.info.state == vim.TaskInfo.State.success:
        if task.info.result is not None and not hideResult:
            out = '%s completed successfully, result: %s' % (actionName, task.info.result)
            print out
        else:
            out = '%s completed successfully.' % actionName
            print out
    else:
        out = '%s did not complete successfully: %s' % (actionName, task.info.error)
        raise task.info.error
        print out

    return task.info.result




def get_datacenter_datastore(si, dsname):
   for dc in si.content.rootFolder.childEntity:
      for ds in dc.datastore:
         if ds.name == dsname:
            return dc, ds
   raise Exception("Datastore with %s name not found" % dsname)




def delfile(si, datastorepath):
   m = re.match("\[(.*?)\].*", datastorepath)
   if m is None:
      raise Exception("Path does not contain datastore")
   dsname = m.group(1)
   dc, ds = get_datacenter_datastore(si, dsname)
   si.content.fileManager.DeleteFile(datastorepath, dc) 
   print "SUCCESSFULLY DELETED FILE. CHECK DATASTORE THROUGH VSPHERE WEB CLIENT TO COMFIRM"





def main():

    try:
        si = None
        try:
            print "Trying to connect to VCENTER SERVER . . ."
            si = connect.Connect('{{ vm_vcenter_host  }}', 443, '{{ ere_user }}@national', '{{ ere_pass }}')
        except IOError, e:
            pass
            atexit.register(Disconnect, si)

        print "Connected to VCENTER SERVER !"
	content = si.RetrieveContent()

	get_datacenter_datastore(si, '{{ ISO_datastore }}')
	delfile(si, '[{{ ISO_datastore }}]{{ ISO_path }}{{ hostname }}.img')

# catch exceptions
    except vmodl.MethodFault, e:
        print "Caught vmodl fault: %s" % e.msg
        return 1
    except Exception, e:
        print "Caught exception: %s" % str(e)
        return 1




# Start program
if __name__ == "__main__":
    main()
